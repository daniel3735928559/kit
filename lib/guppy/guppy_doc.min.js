(function(f){if(typeof exports==="object"&&typeof module!=="undefined"){module.exports=f()}else if(typeof define==="function"&&define.amd){define([],f)}else{var g;if(typeof window!=="undefined"){g=window}else if(typeof global!=="undefined"){g=global}else if(typeof self!=="undefined"){g=self}else{g=this}g.GuppyDoc = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
var GuppyDoc = function(doc){
    doc = doc || "<m><e></e></m>";
    this.set_content(doc);
}

GuppyDoc.prototype.ensure_text_nodes = function(){
    var l = this.base.getElementsByTagName("e");
    for(var i = 0; i < l.length; i++){
	if(!(l[i].firstChild)) l[i].appendChild(this.base.createTextNode(""));
    }
}

GuppyDoc.prototype.root = function(){
    return this.base.documentElement;
}

GuppyDoc.prototype.get_content = function(t,r){
    if(t != "xml"){
	var ans = this.manual_render(t,this.root(),r);
	return ans;
    }
    else return (new XMLSerializer()).serializeToString(this.base);
}

GuppyDoc.prototype.xpath_node = function(xpath, node){
    node = node || this.root()
    return this.base.evaluate(xpath, node, null, XPathResult.FIRST_ORDERED_NODE_TYPE, null).singleNodeValue;
}

GuppyDoc.prototype.xpath_list = function(xpath, node){
    node = node || this.root()
    return this.base.evaluate(xpath, node, null, XPathResult.ORDERED_NODE_ITERATOR_TYPE, null);
}

GuppyDoc.prototype.set_content = function(xml_data){
    this.base = (new window.DOMParser()).parseFromString(xml_data, "text/xml");
    this.ensure_text_nodes();
}

GuppyDoc.bracket_xpath = "(count(./*) != 1 and not \
		          ( \
                            count(./e)=2 and \
			    count(./f)=1 and \
			    count(./e[string-length(text())=0])=2 and \
			    ( \
			      (\
                                count(./f/c)=1 and\
			        count(./f/c[@is_bracket='yes'])=1\
			      )\
			      or\
			      (\
			        f/@c='yes' and \
				count(./e[@current='yes'])=0 and \
				count(./e[@temp='yes'])=0 \
			      )\
			    )\
			  )\
			)  \
			or\
		        (\
			  count(./*) = 1 and \
			  string-length(./e/text()) != 1 and \
			  number(./e/text()) != ./e/text() \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@current = 'yes' \
			) \
			or \
		        ( \
			  count(./*) = 1 and \
			  ./e/@temp = 'yes' \
			)"

GuppyDoc.prototype.manual_render = function(t,n,r){
    var ans = "";
    if(n.nodeName == "e"){
	if(t == "latex" && r){
	    ans = n.getAttribute("render");
	}
	else{
	    ans = n.firstChild.textContent;
	}
    }
    else if(n.nodeName == "f"){
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling){
	    if(nn.nodeName == "b" && nn.getAttribute("p") == t){
		ans = this.manual_render(t,nn,r);
		break;
	    }
	}
    }
    else if(n.nodeName == "b"){
	var cs = []
	var i = 1;
	var par = n.parentNode;
	for(var nn = par.firstChild; nn != null; nn = nn.nextSibling)
	    if(nn.nodeName == "c" || nn.nodeName == "l") cs[i++] = this.manual_render(t,nn,r);
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling){
	    if(nn.nodeType == 3) ans += nn.textContent;
	    else if(nn.nodeType == 1){
		if(nn.hasAttribute("d")){
		    var dim = parseInt(nn.getAttribute("d"));
		    var joiner = function(d,l){
			if(d > 1) for(var k = 0; k < l.length; k++) l[k] = joiner(d-1,l[k]);
			return l.join(nn.getAttribute('sep'+(d-1)));
		    }
		    ans += joiner(dim,cs[parseInt(nn.getAttribute("ref"))]);
		}
		else ans += cs[parseInt(nn.getAttribute("ref"))];
	    }
	}
    }
    else if(n.nodeName == "l"){
	ans = [];
	var i = 0;
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling){
	    ans[i++] = this.manual_render(t,nn,r);
	}
    }
    else if(n.nodeName == "c" || n.nodeName == "m"){
	for(var nn = n.firstChild; nn != null; nn = nn.nextSibling)
	    ans += this.manual_render(t,nn,r);
	if(t == "latex" &&
           n.getAttribute("bracket") == "yes" &&
	   this.base.evaluate(GuppyDoc.bracket_xpath, n, null,
			 XPathResult.BOOLEAN_TYPE, null).booleanValue){ 
	    ans = "\\left("+ans+"\\right)";
	}
    }
    return ans;
}

GuppyDoc.prototype.path_to = function(n){
    var name = n.nodeName;
    if(name == "m") return "guppy_loc_m";
    var ns = 0;
    for(var nn = n; nn != null; nn = nn.previousSibling) if(nn.nodeType == 1 && nn.nodeName == name) ns++;
    return this.path_to(n.parentNode)+"_"+name+""+ns;
}

module.exports = GuppyDoc;

},{}]},{},[1])(1)
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uLy4uLy4uL3Vzci9saWIvbm9kZV9tb2R1bGVzL2Jyb3dzZXJpZnkvbm9kZV9tb2R1bGVzL2Jyb3dzZXItcGFjay9fcHJlbHVkZS5qcyIsInNyYy9ndXBweV9kb2MuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBQUE7QUNBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EiLCJmaWxlIjoiZ2VuZXJhdGVkLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXNDb250ZW50IjpbIihmdW5jdGlvbiBlKHQsbixyKXtmdW5jdGlvbiBzKG8sdSl7aWYoIW5bb10pe2lmKCF0W29dKXt2YXIgYT10eXBlb2YgcmVxdWlyZT09XCJmdW5jdGlvblwiJiZyZXF1aXJlO2lmKCF1JiZhKXJldHVybiBhKG8sITApO2lmKGkpcmV0dXJuIGkobywhMCk7dmFyIGY9bmV3IEVycm9yKFwiQ2Fubm90IGZpbmQgbW9kdWxlICdcIitvK1wiJ1wiKTt0aHJvdyBmLmNvZGU9XCJNT0RVTEVfTk9UX0ZPVU5EXCIsZn12YXIgbD1uW29dPXtleHBvcnRzOnt9fTt0W29dWzBdLmNhbGwobC5leHBvcnRzLGZ1bmN0aW9uKGUpe3ZhciBuPXRbb11bMV1bZV07cmV0dXJuIHMobj9uOmUpfSxsLGwuZXhwb3J0cyxlLHQsbixyKX1yZXR1cm4gbltvXS5leHBvcnRzfXZhciBpPXR5cGVvZiByZXF1aXJlPT1cImZ1bmN0aW9uXCImJnJlcXVpcmU7Zm9yKHZhciBvPTA7bzxyLmxlbmd0aDtvKyspcyhyW29dKTtyZXR1cm4gc30pIiwidmFyIEd1cHB5RG9jID0gZnVuY3Rpb24oZG9jKXtcbiAgICBkb2MgPSBkb2MgfHwgXCI8bT48ZT48L2U+PC9tPlwiO1xuICAgIHRoaXMuc2V0X2NvbnRlbnQoZG9jKTtcbn1cblxuR3VwcHlEb2MucHJvdG90eXBlLmVuc3VyZV90ZXh0X25vZGVzID0gZnVuY3Rpb24oKXtcbiAgICB2YXIgbCA9IHRoaXMuYmFzZS5nZXRFbGVtZW50c0J5VGFnTmFtZShcImVcIik7XG4gICAgZm9yKHZhciBpID0gMDsgaSA8IGwubGVuZ3RoOyBpKyspe1xuXHRpZighKGxbaV0uZmlyc3RDaGlsZCkpIGxbaV0uYXBwZW5kQ2hpbGQodGhpcy5iYXNlLmNyZWF0ZVRleHROb2RlKFwiXCIpKTtcbiAgICB9XG59XG5cbkd1cHB5RG9jLnByb3RvdHlwZS5yb290ID0gZnVuY3Rpb24oKXtcbiAgICByZXR1cm4gdGhpcy5iYXNlLmRvY3VtZW50RWxlbWVudDtcbn1cblxuR3VwcHlEb2MucHJvdG90eXBlLmdldF9jb250ZW50ID0gZnVuY3Rpb24odCxyKXtcbiAgICBpZih0ICE9IFwieG1sXCIpe1xuXHR2YXIgYW5zID0gdGhpcy5tYW51YWxfcmVuZGVyKHQsdGhpcy5yb290KCkscik7XG5cdHJldHVybiBhbnM7XG4gICAgfVxuICAgIGVsc2UgcmV0dXJuIChuZXcgWE1MU2VyaWFsaXplcigpKS5zZXJpYWxpemVUb1N0cmluZyh0aGlzLmJhc2UpO1xufVxuXG5HdXBweURvYy5wcm90b3R5cGUueHBhdGhfbm9kZSA9IGZ1bmN0aW9uKHhwYXRoLCBub2RlKXtcbiAgICBub2RlID0gbm9kZSB8fCB0aGlzLnJvb3QoKVxuICAgIHJldHVybiB0aGlzLmJhc2UuZXZhbHVhdGUoeHBhdGgsIG5vZGUsIG51bGwsIFhQYXRoUmVzdWx0LkZJUlNUX09SREVSRURfTk9ERV9UWVBFLCBudWxsKS5zaW5nbGVOb2RlVmFsdWU7XG59XG5cbkd1cHB5RG9jLnByb3RvdHlwZS54cGF0aF9saXN0ID0gZnVuY3Rpb24oeHBhdGgsIG5vZGUpe1xuICAgIG5vZGUgPSBub2RlIHx8IHRoaXMucm9vdCgpXG4gICAgcmV0dXJuIHRoaXMuYmFzZS5ldmFsdWF0ZSh4cGF0aCwgbm9kZSwgbnVsbCwgWFBhdGhSZXN1bHQuT1JERVJFRF9OT0RFX0lURVJBVE9SX1RZUEUsIG51bGwpO1xufVxuXG5HdXBweURvYy5wcm90b3R5cGUuc2V0X2NvbnRlbnQgPSBmdW5jdGlvbih4bWxfZGF0YSl7XG4gICAgdGhpcy5iYXNlID0gKG5ldyB3aW5kb3cuRE9NUGFyc2VyKCkpLnBhcnNlRnJvbVN0cmluZyh4bWxfZGF0YSwgXCJ0ZXh0L3htbFwiKTtcbiAgICB0aGlzLmVuc3VyZV90ZXh0X25vZGVzKCk7XG59XG5cbkd1cHB5RG9jLmJyYWNrZXRfeHBhdGggPSBcIihjb3VudCguLyopICE9IDEgYW5kIG5vdCBcXFxuXHRcdCAgICAgICAgICAoIFxcXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgY291bnQoLi9lKT0yIGFuZCBcXFxuXHRcdFx0ICAgIGNvdW50KC4vZik9MSBhbmQgXFxcblx0XHRcdCAgICBjb3VudCguL2Vbc3RyaW5nLWxlbmd0aCh0ZXh0KCkpPTBdKT0yIGFuZCBcXFxuXHRcdFx0ICAgICggXFxcblx0XHRcdCAgICAgIChcXFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBjb3VudCguL2YvYyk9MSBhbmRcXFxuXHRcdFx0ICAgICAgICBjb3VudCguL2YvY1tAaXNfYnJhY2tldD0neWVzJ10pPTFcXFxuXHRcdFx0ICAgICAgKVxcXG5cdFx0XHQgICAgICBvclxcXG5cdFx0XHQgICAgICAoXFxcblx0XHRcdCAgICAgICAgZi9AYz0neWVzJyBhbmQgXFxcblx0XHRcdFx0Y291bnQoLi9lW0BjdXJyZW50PSd5ZXMnXSk9MCBhbmQgXFxcblx0XHRcdFx0Y291bnQoLi9lW0B0ZW1wPSd5ZXMnXSk9MCBcXFxuXHRcdFx0ICAgICAgKVxcXG5cdFx0XHQgICAgKVxcXG5cdFx0XHQgIClcXFxuXHRcdFx0KSAgXFxcblx0XHRcdG9yXFxcblx0XHQgICAgICAgIChcXFxuXHRcdFx0ICBjb3VudCguLyopID0gMSBhbmQgXFxcblx0XHRcdCAgc3RyaW5nLWxlbmd0aCguL2UvdGV4dCgpKSAhPSAxIGFuZCBcXFxuXHRcdFx0ICBudW1iZXIoLi9lL3RleHQoKSkgIT0gLi9lL3RleHQoKSBcXFxuXHRcdFx0KSBcXFxuXHRcdFx0b3IgXFxcblx0XHQgICAgICAgICggXFxcblx0XHRcdCAgY291bnQoLi8qKSA9IDEgYW5kIFxcXG5cdFx0XHQgIC4vZS9AY3VycmVudCA9ICd5ZXMnIFxcXG5cdFx0XHQpIFxcXG5cdFx0XHRvciBcXFxuXHRcdCAgICAgICAgKCBcXFxuXHRcdFx0ICBjb3VudCguLyopID0gMSBhbmQgXFxcblx0XHRcdCAgLi9lL0B0ZW1wID0gJ3llcycgXFxcblx0XHRcdClcIlxuXG5HdXBweURvYy5wcm90b3R5cGUubWFudWFsX3JlbmRlciA9IGZ1bmN0aW9uKHQsbixyKXtcbiAgICB2YXIgYW5zID0gXCJcIjtcbiAgICBpZihuLm5vZGVOYW1lID09IFwiZVwiKXtcblx0aWYodCA9PSBcImxhdGV4XCIgJiYgcil7XG5cdCAgICBhbnMgPSBuLmdldEF0dHJpYnV0ZShcInJlbmRlclwiKTtcblx0fVxuXHRlbHNle1xuXHQgICAgYW5zID0gbi5maXJzdENoaWxkLnRleHRDb250ZW50O1xuXHR9XG4gICAgfVxuICAgIGVsc2UgaWYobi5ub2RlTmFtZSA9PSBcImZcIil7XG5cdGZvcih2YXIgbm4gPSBuLmZpcnN0Q2hpbGQ7IG5uICE9IG51bGw7IG5uID0gbm4ubmV4dFNpYmxpbmcpe1xuXHQgICAgaWYobm4ubm9kZU5hbWUgPT0gXCJiXCIgJiYgbm4uZ2V0QXR0cmlidXRlKFwicFwiKSA9PSB0KXtcblx0XHRhbnMgPSB0aGlzLm1hbnVhbF9yZW5kZXIodCxubixyKTtcblx0XHRicmVhaztcblx0ICAgIH1cblx0fVxuICAgIH1cbiAgICBlbHNlIGlmKG4ubm9kZU5hbWUgPT0gXCJiXCIpe1xuXHR2YXIgY3MgPSBbXVxuXHR2YXIgaSA9IDE7XG5cdHZhciBwYXIgPSBuLnBhcmVudE5vZGU7XG5cdGZvcih2YXIgbm4gPSBwYXIuZmlyc3RDaGlsZDsgbm4gIT0gbnVsbDsgbm4gPSBubi5uZXh0U2libGluZylcblx0ICAgIGlmKG5uLm5vZGVOYW1lID09IFwiY1wiIHx8IG5uLm5vZGVOYW1lID09IFwibFwiKSBjc1tpKytdID0gdGhpcy5tYW51YWxfcmVuZGVyKHQsbm4scik7XG5cdGZvcih2YXIgbm4gPSBuLmZpcnN0Q2hpbGQ7IG5uICE9IG51bGw7IG5uID0gbm4ubmV4dFNpYmxpbmcpe1xuXHQgICAgaWYobm4ubm9kZVR5cGUgPT0gMykgYW5zICs9IG5uLnRleHRDb250ZW50O1xuXHQgICAgZWxzZSBpZihubi5ub2RlVHlwZSA9PSAxKXtcblx0XHRpZihubi5oYXNBdHRyaWJ1dGUoXCJkXCIpKXtcblx0XHQgICAgdmFyIGRpbSA9IHBhcnNlSW50KG5uLmdldEF0dHJpYnV0ZShcImRcIikpO1xuXHRcdCAgICB2YXIgam9pbmVyID0gZnVuY3Rpb24oZCxsKXtcblx0XHRcdGlmKGQgPiAxKSBmb3IodmFyIGsgPSAwOyBrIDwgbC5sZW5ndGg7IGsrKykgbFtrXSA9IGpvaW5lcihkLTEsbFtrXSk7XG5cdFx0XHRyZXR1cm4gbC5qb2luKG5uLmdldEF0dHJpYnV0ZSgnc2VwJysoZC0xKSkpO1xuXHRcdCAgICB9XG5cdFx0ICAgIGFucyArPSBqb2luZXIoZGltLGNzW3BhcnNlSW50KG5uLmdldEF0dHJpYnV0ZShcInJlZlwiKSldKTtcblx0XHR9XG5cdFx0ZWxzZSBhbnMgKz0gY3NbcGFyc2VJbnQobm4uZ2V0QXR0cmlidXRlKFwicmVmXCIpKV07XG5cdCAgICB9XG5cdH1cbiAgICB9XG4gICAgZWxzZSBpZihuLm5vZGVOYW1lID09IFwibFwiKXtcblx0YW5zID0gW107XG5cdHZhciBpID0gMDtcblx0Zm9yKHZhciBubiA9IG4uZmlyc3RDaGlsZDsgbm4gIT0gbnVsbDsgbm4gPSBubi5uZXh0U2libGluZyl7XG5cdCAgICBhbnNbaSsrXSA9IHRoaXMubWFudWFsX3JlbmRlcih0LG5uLHIpO1xuXHR9XG4gICAgfVxuICAgIGVsc2UgaWYobi5ub2RlTmFtZSA9PSBcImNcIiB8fCBuLm5vZGVOYW1lID09IFwibVwiKXtcblx0Zm9yKHZhciBubiA9IG4uZmlyc3RDaGlsZDsgbm4gIT0gbnVsbDsgbm4gPSBubi5uZXh0U2libGluZylcblx0ICAgIGFucyArPSB0aGlzLm1hbnVhbF9yZW5kZXIodCxubixyKTtcblx0aWYodCA9PSBcImxhdGV4XCIgJiZcbiAgICAgICAgICAgbi5nZXRBdHRyaWJ1dGUoXCJicmFja2V0XCIpID09IFwieWVzXCIgJiZcblx0ICAgdGhpcy5iYXNlLmV2YWx1YXRlKEd1cHB5RG9jLmJyYWNrZXRfeHBhdGgsIG4sIG51bGwsXG5cdFx0XHQgWFBhdGhSZXN1bHQuQk9PTEVBTl9UWVBFLCBudWxsKS5ib29sZWFuVmFsdWUpeyBcblx0ICAgIGFucyA9IFwiXFxcXGxlZnQoXCIrYW5zK1wiXFxcXHJpZ2h0KVwiO1xuXHR9XG4gICAgfVxuICAgIHJldHVybiBhbnM7XG59XG5cbkd1cHB5RG9jLnByb3RvdHlwZS5wYXRoX3RvID0gZnVuY3Rpb24obil7XG4gICAgdmFyIG5hbWUgPSBuLm5vZGVOYW1lO1xuICAgIGlmKG5hbWUgPT0gXCJtXCIpIHJldHVybiBcImd1cHB5X2xvY19tXCI7XG4gICAgdmFyIG5zID0gMDtcbiAgICBmb3IodmFyIG5uID0gbjsgbm4gIT0gbnVsbDsgbm4gPSBubi5wcmV2aW91c1NpYmxpbmcpIGlmKG5uLm5vZGVUeXBlID09IDEgJiYgbm4ubm9kZU5hbWUgPT0gbmFtZSkgbnMrKztcbiAgICByZXR1cm4gdGhpcy5wYXRoX3RvKG4ucGFyZW50Tm9kZSkrXCJfXCIrbmFtZStcIlwiK25zO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IEd1cHB5RG9jO1xuIl19
